# -*- coding: utf-8 -*-
# -*- ruby -*- 
#
#  Gyazz.com/kdictの内容から接続辞書テキストを生成
#
#  % gyazz2dic {wiki名::ページ名}
#
#  例
#  % gyazz2dic 'kdict::リスト' 'kdict::テスト'
#

require 'net/http'
require 'gyazz'

class GyazzDic
  def initialize
    @weight = {}
  end

  #
  # /$wikiname/name にリストされた単語のウェイトを計算する。
  # Zipfを仮定する場合はウェイトを1/1, 1/2, 1/3, ... と減らす。
  # そうでない場合はすべてに同じウェイトを割り当てる。
  #
  def process(name,value,zipf)
    STDERR.puts "Reading dictionary #{name}..."
    wiki = @wiki
    if name =~ /^(.*)::(.*)$/ then
      wiki = $1
      name = $2
    end
    n = 1.0
    g = Gyazz.new
    g.each(wiki,name){ |line|
      line.chomp!
      next if line =~ /^#/
      next if line =~ /^\s*$/
      div = (zipf ? n : 1.0)
      @weight[line] = value/div
      n += 1.0
    }
  end

  def process_root(wiki,page)
    puts "#{wiki} - #{page}"
    @wiki = wiki
    root = Gyazz.new
    root.each(wiki,page){ |line|
      line.chomp!
      next if line =~ /^#/
      if line =~ /\[\[(.*)\]\]\s+(\*)?(\d+)/ then
        process($1,$3.to_f,$2.to_s == '' ? true : false)
      end
    }
  end

  def dump
    @weight.keys.sort { |a,b|
      @weight[b] <=> @weight[a]
    }.each { |entry|
      puts entry
    }
  end

  def run
    while arg = ARGV.shift do
      if arg =~ /^(.*)::(.*)$/ then
        wiki = $1
        page = $2
        process_root(wiki,page)
      end
    end
    dump
  end
end

g = GyazzDic.new
g.run

